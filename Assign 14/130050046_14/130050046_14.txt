The problem that I solved is to find the Minimum Spanning Tree.
I used the basic Kruskal's Algorithm to implement this.
First I sorted all the edges in non-decreasing order of their weight.
Then in each iteration I picked the smallest weight edge from the sorted vector and checked if it forms a cycle with the tree formed till now. If it formed a cycle I discarded it, else I included that edge in my spanning tree.
I repeated the above step till #Vertices -1 times to form the Minimum Spanning Tree.

To check if a cycle is formed after adding an edge I used the Union-Find Algorithm.
In this I implemented 2 functions Find : which determines which subset a vertex belongs to, and Union : which combines 2 subsets into a single subset. If a vertex belongs to 2 subsets then there exists a cycle.

Input Format:
1st line: No. of vertices and no. of edges (Space seperated values say V and E)
Next E lines: 3 space seperated values- Source (int), Destination (int) and Weight (double)

Output Format:
1st line: Minimum Spanning Tree ->
Next V-1 lines: <Source>-<Destinaton>:<Weight>

Test Cases:
1.
Input:

9 14
0 1 4
0 7 8
1 2 8
1 7 11
2 5 4
2 3 7
3 4 9
3 5 14
5 4 10
6 5 2
7 6 1
7 8 7
8 2 2
8 6 6

Output:

Minimum Spanning Tree ->
7-6:1
8-2:2
6-5:2
2-5:4
0-1:4
2-3:7
1-2:8
3-4:9

2.
Input:

4 5
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4

Output:

Minimum Spanning Tree ->
2-3:4
0-3:5
0-1:10

3.
Input:

7 12
0 1 16
0 2 12
0 3 21
1 3 17
1 4 20
2 3 28
2 5 31
3 4 18
3 5 19
3 6 23
4 6 11
5 6 27

Output:

Minimum Spanning Tree ->
4-6:11
0-2:12
0-1:16
1-3:17
3-4:18
3-5:19